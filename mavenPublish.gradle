apply plugin: 'signing'

configurations {
    samples { extendsFrom runtime}
    jdk
    maven { extendsFrom archives }
    published { extendsFrom archives, signatures}
}

signing {
    required = { gradle.taskGraph.hasTask(uploadPublished) && !version.endsWith("SNAPSHOT") }
    sign configurations.archives
}

repositories {
    mavenLocal()
    maven { url 'https://oss.sonatype.org/content/groups/staging' }
    mavenCentral()
}

uploadPublished {

    doFirst {
        // configure repositories in a doFirst so we can late bind the properties
        repositories {
            mavenDeployer {
                def repositoryUrl = getStringProperty('repositoryUrl', 'https://oss.sonatype.org/content/repositories/snapshots/')
                def repositoryUsername = getStringPropertyDefaultAsProperty('repositoryUsername', 'sonatypeUsername')
                def repositoryPassword = getStringPropertyDefaultAsProperty('repositoryPassword', 'sonatypePassword')

                configurePOM(pom)
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                repository(url: repositoryUrl) {
                    authentication userName: repositoryUsername, password: repositoryPassword
                }
            }
        }
    }
    configuration = configurations.published
}

install {
    doFirst {
        configurePOM(repositories.mavenInstaller.pom)
    }
    configuration = configurations.published
}

private configurePOM(def pom) {
    pom.project {
        name "Gluon Charm Down ${project.name.capitalize()}"
        description project.ext.description
        url 'https://gluonhq.com/products/mobile/'
        modelVersion '4.0.0'
        packaging 'jar'
        scm {
            connection 'scm:hg:https://bitbucket.org/gluon-oss/charm-down'
            developerConnection 'scm:hg:https://bitbucket.org/gluon-oss/charm-down'
            url 'https://bitbucket.org/gluon-oss/charm-down'
        }
        developers {
            developer {
                name 'Johan Vos'
                email 'johan.vos@gluonhq.com'
                roles {
                    role 'author'
                    role 'developer'
                }
            }
            developer {
                name 'Joeri Sykora'
                email 'joeri.sykora@gluonhq.com'
                roles {
                    role 'author'
                    role 'developer'
                }
            }
            developer {
                name 'Erwin Morrhey'
                email 'erwin.morrhey@gluonhq.com'
                roles {
                    role 'author'
                    role 'developer'
                }
            }
        }
        licenses {
            license {
                name 'The GNU General Public License'
                url 'https://opensource.org/licenses/GPL-3.0'
                distribution 'repo'
            }
        }
    }
}

private String getStringProperty(String name, String defaultValue) {
    if (!hasProperty(name)) {
        return defaultValue
    }

    def propertyValue = getProperty(name)
    return propertyValue != null ? propertyValue.toString().trim() : defaultValue
}

private String getStringPropertyDefaultAsProperty(String name, String defaultProperty) {
    if (!hasProperty(name)) {
        return hasProperty(defaultProperty) ? property(defaultProperty) : null
    }

    def propertyValue = property(name)
    if (propertyValue != null) {
        return propertyValue.toString().trim()
    } else {
        return hasProperty(defaultProperty) ? property(defaultProperty) : null
    }
}
